/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamlinedgradingsystem;
import ca.sfu.cmpt275.deliverable.colinq.*;
import java.sql.*;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JOptionPane;
import streamlinedgradingsystem.ManageAccountsGUI;

/**
 *
 * @author colinq
 */
public class CreateAccountGUI extends javax.swing.JFrame {
    private User model;
    private UserManager userManager = new UserManager();
    private User newUser = new User();
    private UserAccount newUserAccount = new UserAccount();
    private Connection con;
    /**
     * Creates new form CreateAccountGUI
     */
    public CreateAccountGUI(User model) {
        this.model = model;
        initComponents();
        connectToDatabase();
        loadAccountsIntoModel();
        
        userManager.display();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        generateTempPasswordBUtton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        administrativeAssistantCheckbox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        instructorCheckbox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        TACheckbox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        displayPasswordLabel = new javax.swing.JLabel();
        tempPasswordTextField5 = new javax.swing.JLabel();
        employeeIDField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        generateTempPasswordButton = new javax.swing.JButton();
        lastNameField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        middleNameField = new javax.swing.JTextField();
        createAccountTitle = new javax.swing.JLabel();
        createAccountButton = new javax.swing.JButton();
        loginIDField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        administratorCheckbox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        systemAdministratorCheckbox = new javax.swing.JCheckBox();

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Temporary Password:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Temporary Password:");

        generateTempPasswordBUtton1.setText("Generate");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Next");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jCheckBox3.setText("System Administrator");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Temporary Password:");

        administrativeAssistantCheckbox.setText("Administrative Assistant");
        administrativeAssistantCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administrativeAssistantCheckboxActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Employee ID:");

        instructorCheckbox.setText("Instructor");
        instructorCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructorCheckboxActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setText("Middle Name:");

        TACheckbox.setText("TA/TM");
        TACheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TACheckboxActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Login ID:");

        displayPasswordLabel.setText("Temp Password");

        employeeIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeIDFieldActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Role(s):");

        firstNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameFieldActionPerformed(evt);
            }
        });

        generateTempPasswordButton.setText("Generate");
        generateTempPasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTempPasswordButtonActionPerformed(evt);
            }
        });

        lastNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameFieldActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        middleNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                middleNameFieldActionPerformed(evt);
            }
        });

        createAccountTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        createAccountTitle.setText("Create Account");

        createAccountButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        createAccountButton.setText("Create");
        createAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountButtonActionPerformed(evt);
            }
        });

        loginIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginIDFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Last Name:");

        administratorCheckbox.setText("Administrator");
        administratorCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                administratorCheckboxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("First Name:");

        systemAdministratorCheckbox.setText("System Administrator");
        systemAdministratorCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemAdministratorCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(createAccountTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(254, 254, 254))
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(displayPasswordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(generateTempPasswordButton))
                                    .addComponent(createAccountButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(loginIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(tempPasswordTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(administratorCheckbox)
                                    .addComponent(instructorCheckbox))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TACheckbox)
                                    .addComponent(systemAdministratorCheckbox))))
                        .addGap(28, 28, 28)
                        .addComponent(administrativeAssistantCheckbox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(employeeIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(firstNameField)
                            .addComponent(lastNameField)
                            .addComponent(middleNameField))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(createAccountTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(employeeIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(middleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(administratorCheckbox)
                    .addComponent(systemAdministratorCheckbox)
                    .addComponent(administrativeAssistantCheckbox))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(instructorCheckbox)
                    .addComponent(TACheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(loginIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tempPasswordTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(generateTempPasswordButton)
                    .addComponent(displayPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createAccountButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void administrativeAssistantCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administrativeAssistantCheckboxActionPerformed
        AbstractButton button = (AbstractButton) evt.getSource();
        boolean isSelected = button.getModel().isSelected();
        if (isSelected) {
            newUserAccount.addRole(User.ADMINISTRATIVE_ASSISTANT);
        } else {
            newUserAccount.removeRole(User.ADMINISTRATIVE_ASSISTANT);
        }

        // DEBUGGING--------------------------
        newUserAccount.dump();
    }//GEN-LAST:event_administrativeAssistantCheckboxActionPerformed

    private void instructorCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructorCheckboxActionPerformed
        AbstractButton button = (AbstractButton) evt.getSource();
        boolean isSelected = button.getModel().isSelected();
        if (isSelected) {
            newUserAccount.addRole(User.INSTRUCTOR);
        } else {
            newUserAccount.removeRole(User.INSTRUCTOR);
        }

        // DEBUGGING--------------------------
        newUserAccount.dump();
    }//GEN-LAST:event_instructorCheckboxActionPerformed

    private void TACheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TACheckboxActionPerformed
       AbstractButton button = (AbstractButton) evt.getSource();
        boolean isSelected = button.getModel().isSelected();
        if (isSelected) {
            newUserAccount.addRole(User.TA);
        } else {
            newUserAccount.removeRole(User.TA);
        }

        // DEBUGGING--------------------------
        newUserAccount.dump();
    }//GEN-LAST:event_TACheckboxActionPerformed

    private void employeeIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeIDFieldActionPerformed
  
    }//GEN-LAST:event_employeeIDFieldActionPerformed

    private void firstNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameFieldActionPerformed
        
    }//GEN-LAST:event_firstNameFieldActionPerformed

    private void generateTempPasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTempPasswordButtonActionPerformed
        Random rand = new Random();
        String tempPassword = Integer.toString(rand.nextInt(Integer.MAX_VALUE) + 1);
        newUserAccount.setPassword(tempPassword);
        displayPasswordLabel.setText(tempPassword);
        //Debug
        newUserAccount.dump();
    }//GEN-LAST:event_generateTempPasswordButtonActionPerformed

    private void lastNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameFieldActionPerformed

    }//GEN-LAST:event_lastNameFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(new Runnable() {
		public void run() {
			new ManageAccountsGUI(model).setVisible(true);
		}
	});
    }//GEN-LAST:event_backButtonActionPerformed

    private void middleNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_middleNameFieldActionPerformed
 
    }//GEN-LAST:event_middleNameFieldActionPerformed

    private void createAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountButtonActionPerformed
        String employeeID = employeeIDField.getText();
        String firstName = firstNameField.getText();
        String lastName = lastNameField.getText();
        String middleName = middleNameField.getText();
        String loginID = loginIDField.getText();

        try {
            newUser.setEmployeeID(Integer.parseInt(employeeID));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Please enter the ID only in integer type, with maximum digit of 10." ,
                    "Incorrect ID Format" , JOptionPane.WARNING_MESSAGE);
        }
        newUser.setFirstName(firstName);
        newUser.setLastName(lastName);
        newUser.setMiddleName(middleName);
        newUserAccount.setLoginID(loginID);
        
        if (validateAccountInfo()) {
            newUser.addAccount(newUserAccount);
            System.out.println("about to insert into database");
            
            newUser.display();
            
            if (validateDuplicateRoles(newUser) && validateDuplicateIDs(newUser)) {
                insertIntoDatabase();
                JOptionPane.showMessageDialog(null,
                           "Creation Successful!" , "Information" , JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_createAccountButtonActionPerformed

    private void loginIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginIDFieldActionPerformed

    }//GEN-LAST:event_loginIDFieldActionPerformed

    private void administratorCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_administratorCheckboxActionPerformed
        AbstractButton button = (AbstractButton) evt.getSource();
        boolean isSelected = button.getModel().isSelected();
        if (isSelected) {
            newUserAccount.addRole(User.ADMINISTRATOR);
        } else {
            newUserAccount.removeRole(User.ADMINISTRATOR);
        }

        // DEBUGGING--------------------------
        newUserAccount.dump();
    }//GEN-LAST:event_administratorCheckboxActionPerformed

    private void systemAdministratorCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemAdministratorCheckboxActionPerformed
        AbstractButton button = (AbstractButton) evt.getSource();
        boolean isSelected = button.getModel().isSelected();
        if (isSelected) {
            newUserAccount.addRole(User.SYSTEM_ADMINISTRATOR);
        } else {
            newUserAccount.removeRole(User.SYSTEM_ADMINISTRATOR);
        }

        // DEBUGGING--------------------------
        newUserAccount.dump();
    }//GEN-LAST:event_systemAdministratorCheckboxActionPerformed
    
    private void connectToDatabase() {
        String userName = "c275g11";
        String password = "bL344y3Emh2dPtaT";
        String url = "jdbc:sqlserver://cypress;" +
                        "user = " + userName + ";" +
			"password = " + password;
        
        // DEBUGG-------------------------
        System.out.println("\n connectionUrl = " + url + "\n\n");
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        }catch(ClassNotFoundException ce) {
            System.out.println("\n\nNo JDBC dirver; exit now.\n\n");
            return;
	}
        
        try {
            con = DriverManager.getConnection(url);
	} catch (SQLException se) {
            System.out.println("\n\nFail to connect to CSIL SQL Server; exit now.\n\n");
            return;
        }
    }
    
     private void loadAccountsIntoModel() {
        try {
            PreparedStatement stat = con.prepareStatement(
                    "SELECT * FROM Account");
            ResultSet accounts = executeQuery(stat);
            processAccountInfo(accounts);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private ResultSet executeQuery(PreparedStatement pstmt) {
        try {
            return(pstmt.executeQuery());
        } catch (SQLException se){
            System.out.println("\nSQL Exception occured, the state : "+
				se.getSQLState()+"\nMessage:\n"+se.getMessage()+"\n");
            return null;
	}
    }
    
    private void processAccountInfo(ResultSet accounts) throws SQLException {
        
        while(accounts.next()) {
            User nextUser = new User();
            UserAccount nextUserAccount = new UserAccount();
            
            nextUser.setFirstName(accounts.getString("firstName"));
            nextUser.setMiddleName(accounts.getString("middleName"));
            nextUser.setLastName(accounts.getString("lastName"));
            nextUser.setEmployeeID(accounts.getInt("employeeID"));
            nextUserAccount.setLoginID(accounts.getString("loginID"));
            nextUserAccount.setAccountID(accounts.getInt("accountID"));
//            nextUserAccount.setTempPassword(accounts.getString("password"));
//            nextUserAccount.setAccess(accounts.getBoolean("islocked"));

            if (accounts.getInt("isAdministrator") == 1) {
                nextUserAccount.addRole(User.ADMINISTRATOR);
            }
            if (accounts.getInt("isAssistAdmin") == 1) {
                nextUserAccount.addRole(User.ADMINISTRATIVE_ASSISTANT);            
            }
            if (accounts.getInt("isSysAdmin") == 1) {
                nextUserAccount.addRole(User.SYSTEM_ADMINISTRATOR);
            }
            if (accounts.getInt("isTA") == 1) {
                nextUserAccount.addRole(User.TA);
            }
            if (accounts.getInt("isInstructor") == 1){
                nextUserAccount.addRole(User.INSTRUCTOR);
            }
            
            nextUser.addAccount(nextUserAccount);
            userManager.addUser(nextUser);
        }
    }
    
    private void insertIntoDatabase() {
        try {
            Statement stat = con.createStatement();
//            int accountID = newUserAccount.getAccountID();
            int isAssistAdmin = newUserAccount.isAdministrativeAssistant();
            int isSysAdmin = newUserAccount.isSystemAdministrator();
            int isAdministrator = newUserAccount.isAdministrator();
            int isTA = newUserAccount.isTA();
            int isInstructor = newUserAccount.isInstructor();
                
            stat.executeUpdate("INSERT INTO Account(employeeID, firstName, "
                    + "middleName, lastName, loginID, password, ispasswdtemp, "
                    + "islocked, isAssistAdmin, isSysAdmin, isAdministrator,"
                    + "isTA, isInstructor)"
                        + " Values" + "("
//                        + accountID + ", "
                        + newUser.getEmployeeID() + ", "
                        + "'" + newUser.getFirstName()+ "'" + ", "
                        + "'" + newUser.getMiddleName()+ "'" + ", "
                        + "'" + newUser.getLastName()+ "'" + ", "
                        + "'" + newUserAccount.getLoginID() + "'" + ", "
                        + "'" + newUserAccount.getPassword() + "'" + ", "
                        + newUserAccount.isPassTemp() + ", "
                        + newUserAccount.isBlocked() + ", "
                        + isAssistAdmin + ", "
                        + isSysAdmin + ", "
                        + isAdministrator + ", "
                        + isTA + ", "
                        + isInstructor + ")");
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
//    private void loadAccountsIntoModel() throws SQLException {
//        PreparedStatement stat = con.prepareStatement(
//            "SELECT * FROM Account");
//        ResultSet accounts = executeQuery(stat);
//        processAccountInfo(accounts);
//    }
    
    
    
    private boolean validateAccountInfo() {
       if(newUser.getEmployeeID() == 0) {
           JOptionPane.showMessageDialog(null,
                       "No Employee ID!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       if(newUser.getEmployeeID() < 0) {
           JOptionPane.showMessageDialog(null,
                       "Please enter in correct format for employeeID!" , "Format ID" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       if(newUser.getFirstName() == null || newUser.getFirstName().equals("")) {
            JOptionPane.showMessageDialog(null,
                       "No First Name!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       if(newUser.getLastName() == null || newUser.getLastName().equals("")) {
            JOptionPane.showMessageDialog(null,
                       "No Last Name!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       if(newUserAccount.getLoginID() == null || newUserAccount.getLoginID().equals("")) {
            JOptionPane.showMessageDialog(null,
                       "No Login ID!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       
       if(newUserAccount.getPassword() == null || newUserAccount.getPassword().equals("")) {
             JOptionPane.showMessageDialog(null,
                       "No Temp Password!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       if(newUserAccount.getRoles().isEmpty()) {
           JOptionPane.showMessageDialog(null,
                       "No Roles Selected!" , "Warning!" , JOptionPane.WARNING_MESSAGE);
           return false;
       }
       return true;
   }
    
    private boolean validateDuplicateIDs(User targetUser) {
        for (User user : userManager.getUsers()) {
            if (user.getAccount().getLoginID().equals(targetUser.getAccount().getLoginID())) {
                JOptionPane.showMessageDialog(null,
                       "The UserID has already been used!", 
                       "Warning" , JOptionPane.WARNING_MESSAGE);
                return false;
            }
            if (user.getEmployeeID() == targetUser.getEmployeeID()) {
                JOptionPane.showMessageDialog(null,
                       "The EmployeeID has already been used!", 
                       "Warning" , JOptionPane.WARNING_MESSAGE);
                return false;
            }
        }
        return true;
    }
    
    private boolean validateDuplicateRoles(User user) {
        if (userManager.getUser(user) == null) {
                return true;
        } else {
            for(String role : user.getAccount().getRoles()) {
                if (userManager.getUser(user).searchRole(role)) {
                    JOptionPane.showMessageDialog(null,
                            "This user already has account with the role: " + role + "!",
                            "Warning" , JOptionPane.WARNING_MESSAGE);
                    return false;
                }
            }
          return true;
        }
       
    }
//    
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(CreateAccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(CreateAccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(CreateAccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(CreateAccountGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new CreateAccountGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox TACheckbox;
    private javax.swing.JCheckBox administrativeAssistantCheckbox;
    private javax.swing.JCheckBox administratorCheckbox;
    private javax.swing.JButton backButton;
    private javax.swing.JButton createAccountButton;
    private javax.swing.JLabel createAccountTitle;
    private javax.swing.JLabel displayPasswordLabel;
    private javax.swing.JTextField employeeIDField;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JButton generateTempPasswordBUtton1;
    private javax.swing.JButton generateTempPasswordButton;
    private javax.swing.JCheckBox instructorCheckbox;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField loginIDField;
    private javax.swing.JTextField middleNameField;
    private javax.swing.JCheckBox systemAdministratorCheckbox;
    private javax.swing.JLabel tempPasswordTextField5;
    // End of variables declaration//GEN-END:variables
}
