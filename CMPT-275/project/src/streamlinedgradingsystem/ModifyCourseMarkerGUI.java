/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamlinedgradingsystem;

import ca.sfu.cmpt275.deliverable.colinq.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;

/**
 *
 * @author Colin
 * modified by Nari 
 * modified by Susan - all sections referring to inserting students into the database
 */
public class ModifyCourseMarkerGUI extends javax.swing.JFrame {
    private Course courseModel;
    private UserManager instructorManager = new UserManager();
    private UserManager TAManager = new UserManager();
    private UserManager CurrInstructor = new UserManager();
    private String chosenInstructor = "";
    private String chosenTA = "";
    private ArrayList<String> chosenInstructors = new ArrayList();
    private ArrayList<String> chosenTAs = new ArrayList();
    private ArrayList<String> deleteTAs = new ArrayList();
    private DefaultListModel listModel = new DefaultListModel();
    private DefaultListModel listModel2 = new DefaultListModel();
    private DefaultListModel listModel3 = new DefaultListModel();
    private Connection con;
    
    private User userModel;
    private String fname;
    private String lname;
    JFileChooser chooser;
    /**
     * Creates new form CreateCourseMarkerGUI
     */
    public ModifyCourseMarkerGUI(User userModel, Course courseModel) {
        this.userModel = userModel;
        this.courseModel = courseModel;
        chooser = new JFileChooser();
        //jTextField3.setText(courseModel.getCourseNumber());
        //jTextField3.setEditable(false);
      
        
        initComponents();
        markerList.setModel(listModel);
        removeList.setModel(listModel2);
        instructorList.setModel(listModel3);
        connectToDatabase();
        loadMarkersIntoModel();
        TAManager.display();
        displayCurrentMarkers();
        
        //debugging---------
        displayMarkers();
        
        addItemsToComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        modifyInstructorTATitle = new javax.swing.JLabel();
        CreateButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        instructorComboBox = new javax.swing.JComboBox();
        newInstrLabel = new javax.swing.JLabel();
        TAComboBox = new javax.swing.JComboBox();
        addOrDelTALabel = new javax.swing.JLabel();
        addTAButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        markerList = new javax.swing.JList();
        deleteTAButton = new javax.swing.JButton();
        markersAddedLabel = new javax.swing.JLabel();
        currInstLabel = new javax.swing.JLabel();
        currInstrLabel = new javax.swing.JTextField();
        instrIDLabel = new javax.swing.JLabel();
        instrIDTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        taTable = new javax.swing.JTable();
        viewTASButton = new javax.swing.JButton();
        markersDelLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        removeList = new javax.swing.JList();
        removeTAButton = new javax.swing.JButton();
        undoMarkerButton = new javax.swing.JButton();
        addInstrButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        instructorList = new javax.swing.JList();
        removeCurrInstrButton = new javax.swing.JButton();
        undoInstrButton = new javax.swing.JButton();
        updateCSVPathLabel = new javax.swing.JLabel();
        updateCSVPathTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        modifyInstructorTATitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        modifyInstructorTATitle.setText("Modify Instructor and TA");

        CreateButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        CreateButton.setText("Confirm");
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        instructorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructorComboBoxActionPerformed(evt);
            }
        });

        newInstrLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        newInstrLabel.setText("Add a new Instructor:");

        TAComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TAComboBoxActionPerformed(evt);
            }
        });

        addOrDelTALabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        addOrDelTALabel.setText("Add or Delete a TA:");

        addTAButton.setText("Add");
        addTAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTAButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(markerList);

        deleteTAButton.setText("Undo");
        deleteTAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTAButtonActionPerformed(evt);
            }
        });

        markersAddedLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        markersAddedLabel.setText("Markers Added:");

        currInstLabel.setText("Current Instructor:");

        currInstrLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currInstrLabelActionPerformed(evt);
            }
        });

        instrIDLabel.setText("Instructor ID:");

        instrIDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instrIDTextFieldActionPerformed(evt);
            }
        });

        taTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(taTable);

        viewTASButton.setText("view assigned TAS");
        viewTASButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewTASButtonActionPerformed(evt);
            }
        });

        markersDelLabel.setText("Markers Deleted:");

        jScrollPane3.setViewportView(removeList);

        removeTAButton.setText("Remove");
        removeTAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTAButtonActionPerformed(evt);
            }
        });

        undoMarkerButton.setText("Undo");
        undoMarkerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMarkerButtonActionPerformed(evt);
            }
        });

        addInstrButton.setText("Add");
        addInstrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addInstrButtonActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(instructorList);

        removeCurrInstrButton.setText("Remove Current Instructor");
        removeCurrInstrButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeCurrInstrButtonMousePressed(evt);
            }
        });
        removeCurrInstrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCurrInstrButtonActionPerformed(evt);
            }
        });

        undoInstrButton.setText("Undo");
        undoInstrButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoInstrButtonActionPerformed(evt);
            }
        });

        updateCSVPathLabel.setText("Updated Students File Path (CSV Path):");

        updateCSVPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCSVPathTextFieldActionPerformed(evt);
            }
        });

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(newInstrLabel)
                                .addGap(12, 12, 12)
                                .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addInstrButton)
                                .addGap(140, 140, 140))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(currInstLabel)
                                .addGap(18, 18, 18)
                                .addComponent(currInstrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(instrIDLabel)
                                .addGap(18, 18, 18)
                                .addComponent(instrIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(removeCurrInstrButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(8, 8, 8))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(238, 238, 238)
                            .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(54, 54, 54)
                            .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(64, 64, 64)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(addOrDelTALabel)
                                    .addGap(18, 18, 18)
                                    .addComponent(TAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(addTAButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removeTAButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(undoInstrButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(viewTASButton)))))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(markersAddedLabel)
                                .addComponent(updateCSVPathLabel)
                                .addComponent(markersDelLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(deleteTAButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(updateCSVPathTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(undoMarkerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jButton1)
                                            .addGap(0, 0, Short.MAX_VALUE))))))))
                .addGap(38, 38, 38))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifyInstructorTATitle, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(193, 193, 193))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(modifyInstructorTATitle, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currInstLabel)
                    .addComponent(currInstrLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instrIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(instrIDLabel)
                    .addComponent(removeCurrInstrButton))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newInstrLabel)
                    .addComponent(instructorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addInstrButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(addOrDelTALabel)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(TAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(addTAButton)
                                        .addComponent(removeTAButton)))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(32, 32, 32)
                                                .addComponent(deleteTAButton)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(markersDelLabel)
                                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(undoMarkerButton))))
                                    .addComponent(markersAddedLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(updateCSVPathLabel)
                                    .addComponent(updateCSVPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1))
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CreateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(viewTASButton)))
                    .addComponent(undoInstrButton))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayCurrentMarkers(){
        String instFirstName = "";
        String instMiddleName = "";
        String instLastName = "";
        Integer InstID = courseModel.getInstructorID();
        
        int a=InstID;
        
        String DB_URL = "jdbc:sqlserver://cypress;";
        String USER = "c275g11";
        String PASS = "bL344y3Emh2dPtaT";
        Connection conn = null;
        Statement stmt = null;
         
        try{
                        
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        conn = DriverManager.getConnection(DB_URL,USER,PASS);
                        String sql;
                        sql="select firstName,lastName from Account where employeeID="+a+"";
                        stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                        if(rs.next()){
                            fname = rs.getString(1);
                            lname = rs.getString(2);}
                            
                            System.out.println(fname);
                            System.out.println(lname);
                            
                        
                        
                            
                        rs.close();
                        stmt.close();
                        conn.close();
                        
        }
        catch(SQLException se){
                        //Handle errors for JDBC
                        JOptionPane.showMessageDialog(null,se,"SQLException", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
                        //Handle errors for Class.forName
                        JOptionPane.showMessageDialog(null,e,"Exception", JOptionPane.INFORMATION_MESSAGE);
        }

       
//          try {
//            PreparedStatement stat = con.prepareStatement(
//                    "SELECT * "
//                            + "FROM Account "
//                            + "WHERE employeeID ='"+InstID+"'");
//            ResultSet rs = executeQuery(stat);
//            instFirstName = rs.getString("firstName");
//            System.out.println(instFirstName);
//
//        } catch (SQLException ex) {
//            ex.printStackTrace();
//        }
        CurrInstructor.getUser(InstID);
        currInstrLabel.setText(fname + lname);
        currInstrLabel.setEditable(false);
        
        instrIDTextField.setText(Integer.toString(courseModel.getInstructorID()));
        instrIDTextField.setEditable(false);
        
    }
    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed
        if(insertIntoDatabase()){
        JOptionPane.showMessageDialog(null,
                           "Creation Successful!" , "Information" , JOptionPane.INFORMATION_MESSAGE);
        }
        
        if (isTherePath()) {
            if (modifyStudentsIntoDb()){
                JOptionPane.showMessageDialog(null,
                           "Students Successfully Added!" , "Information" , JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null,
                           "Student Path Was Not Found." , "Information" , JOptionPane.INFORMATION_MESSAGE);        
            }
        }
        
      this.setVisible(false);
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ManageCoursesGUI(userModel).setVisible(true);
                }
            });
       
    }//GEN-LAST:event_CreateButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModifyCourseGUI(userModel, courseModel).setVisible(true);
            }
        });
    }//GEN-LAST:event_backButtonActionPerformed

    private void addTAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTAButtonActionPerformed

        if (!chosenTA.equals("")) {
            if (chosenTAs.contains(chosenTA)) {
                JOptionPane.showMessageDialog(null,
                           "This TA has already already been selected!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
            } 
            else if (chosenInstructors.contains(chosenTA)){
                JOptionPane.showMessageDialog(null,
                           "This TA has been selected as the Instructor!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
            }else {
                chosenTAs.add(chosenTA);
                listModel.addElement(chosenTA);
            }
        }
    }//GEN-LAST:event_addTAButtonActionPerformed

    private void instructorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructorComboBoxActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        chosenInstructor = (String)cb.getSelectedItem();
        
        //DEBUG
        System.out.println("Role Instructor is: " + chosenInstructor);
    }//GEN-LAST:event_instructorComboBoxActionPerformed

    private void TAComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TAComboBoxActionPerformed
        JComboBox cb = (JComboBox)evt.getSource();
        chosenTA = (String)cb.getSelectedItem();
        
        //DEBUG
        System.out.println("Role TA is: " + chosenTA );
    }//GEN-LAST:event_TAComboBoxActionPerformed

    private void deleteTAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTAButtonActionPerformed
       int index = markerList.getSelectedIndex();
       System.out.println("index is: " + index);
       if (index == -1) {
           JOptionPane.showMessageDialog(null,
                   "Nothing is selected!" , "Warning!" ,
                   JOptionPane.WARNING_MESSAGE);
       } else {
        Object removedItem = listModel.remove(index);
        String removedMarker = (String)removedItem;
        if(chosenInstructors.contains(removedMarker)) {
            chosenInstructors.remove(removedMarker);
        } else {
            chosenTAs.remove(removedMarker);
        }
       }
    }//GEN-LAST:event_deleteTAButtonActionPerformed

    private void instrIDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instrIDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_instrIDTextFieldActionPerformed

    private void currInstrLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currInstrLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_currInstrLabelActionPerformed

    private void viewTASButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewTASButtonActionPerformed
        int CoursID = courseModel.getCourseID();
        String DB_URL = "jdbc:sqlserver://cypress;";
        String USER = "c275g11";
        String PASS = "bL344y3Emh2dPtaT";
        Connection conn = null;
        Statement stmt = null;
         
        try{
                        
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                        conn = DriverManager.getConnection(DB_URL,USER,PASS);
                        String sql;
                        sql="select firstName,lastName from Account FULL JOIN TA on Account.employeeID=TAEmployeeID where courseID="+CoursID+"";
                        stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(sql);
                        taTable.setModel(DbUtils.resultSetToTableModel(rs));
                        rs.close();
                        stmt.close();
                        conn.close();
                        
        }
        catch(SQLException se){
                        //Handle errors for JDBC
                        JOptionPane.showMessageDialog(null,se,"SQLException", JOptionPane.INFORMATION_MESSAGE);
        }catch(Exception e){
                        //Handle errors for Class.forName
                        JOptionPane.showMessageDialog(null,e,"Exception", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_viewTASButtonActionPerformed

    private void removeTAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTAButtonActionPerformed
                if (!chosenTA.equals("")) {
            if (deleteTAs.contains(chosenTA)) {
                JOptionPane.showMessageDialog(null,
                           "This TA has already already been selected!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
            } 
            else if (chosenInstructors.contains(chosenTA)){
                JOptionPane.showMessageDialog(null,
                           "This TA has been selected as the Instructor!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
            }else {
                deleteTAs.add(chosenTA);
                listModel2.addElement(chosenTA);
            }
        }
    }//GEN-LAST:event_removeTAButtonActionPerformed

    private void undoMarkerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMarkerButtonActionPerformed
        int index = removeList.getSelectedIndex();
       System.out.println("index is: " + index);
       if (index == -1) {
           JOptionPane.showMessageDialog(null,
                   "Nothing is selected!" , "Warning!" ,
                   JOptionPane.WARNING_MESSAGE);
       } else {
        Object removedItem = listModel2.remove(index);
        String removedMarker = (String)removedItem;
        if(chosenInstructors.contains(removedMarker)) {
            chosenInstructors.remove(removedMarker);
        } else {
            deleteTAs.remove(removedMarker);
        }
       }
    }//GEN-LAST:event_undoMarkerButtonActionPerformed

    private void addInstrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addInstrButtonActionPerformed
         if (!chosenInstructor.equals("")) {
           
            if (chosenInstructors.size() < 1) {
                if (chosenTAs.contains(chosenInstructor)) {
                JOptionPane.showMessageDialog(null,
                           "This Instrucor has been selected as a TA!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
                } else {
                    chosenInstructors.add(chosenInstructor);
                    System.out.println("instructors size is: " + chosenInstructors.size());
                    listModel3.addElement(chosenInstructor);
                }
            } else {
                 JOptionPane.showMessageDialog(null,
                           "An instructor has already been selected!" , "Reminder" , 
                           JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_addInstrButtonActionPerformed

    private void removeCurrInstrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCurrInstrButtonActionPerformed
         try {
            Statement stat = con.createStatement();

            stat.executeUpdate("UPDATE Course SET instructorEmployeeID= NULL WHERE courseID = '"+courseModel.getCourseID()+"' ");
          
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex,"SQLException", JOptionPane.INFORMATION_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_removeCurrInstrButtonActionPerformed

    private void removeCurrInstrButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeCurrInstrButtonMousePressed
      removeCurrInstrButton.setBackground(Color.red);
    }//GEN-LAST:event_removeCurrInstrButtonMousePressed

    private void undoInstrButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoInstrButtonActionPerformed
           int index = instructorList.getSelectedIndex();
       System.out.println("index is: " + index);
       if (index == -1) {
           JOptionPane.showMessageDialog(null,
                   "Nothing is selected!" , "Warning!" ,
                   JOptionPane.WARNING_MESSAGE);
       } else {
        Object removedItem = listModel3.remove(index);
        String removedMarker = (String)removedItem;
        if(chosenInstructors.contains(removedMarker)) {
            chosenInstructors.remove(removedMarker);
        } else {
            chosenTAs.remove(removedMarker);
        }
       }
    }//GEN-LAST:event_undoInstrButtonActionPerformed

    private void updateCSVPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCSVPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCSVPathTextFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        chooser.setDialogTitle("Specify student file path");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int path = chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String subPathName=f.getAbsolutePath();
        updateCSVPathTextField.setText(subPathName);
    }//GEN-LAST:event_jButton1ActionPerformed
     
    private boolean isTherePath() {
        return !updateCSVPathTextField.getText().equals("");
    }
    
    private boolean deleteStudents(int courseID){
        //this deletes all students in the course number so that we can then 
        //re-add the entire updated csv file
        try {
            Statement stat = con.createStatement();
            String SQL_0 =("DELETE FROM STUDENT " +
                           "WHERE courseID = " + courseID); 
                                               
            System.out.println(SQL_0);
            stat.executeUpdate(SQL_0); 
            return true;
        }
        catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }  
    }
    
    private boolean insertStudent(String[] student, int courseID, int grouped){
        try {
            // \\freesia.csil.sfu.ca\ userdata\skhamilt\Desktop\275\studentListInput.csv
            Statement stat = con.createStatement();
            String SQL_0 =("INSERT INTO STUDENT VALUES (" +
                           student[3] + ", " + courseID + 
                           ", '" + student[0] + "', '" + student[1] + 
                           "', '" + student[2] + "', " + grouped + ")");                    
            System.out.println(SQL_0);
            stat.executeUpdate(SQL_0); 
        }
        catch (SQLException ex) {
            ex.printStackTrace();
            return false;
        }  
        return true;
    }
    
    private boolean modifyStudentsIntoDb() { 
    //  unloading csv happens in here as well as inserting into db
        String csvPath = updateCSVPathTextField.getText();
        System.out.println(csvPath);
        BufferedReader br = null;
	String line = "";
	String cvsSplitBy = ",";
        try{
            deleteStudents(courseModel.getCourseID()); //only delete if the file reads
            br = new BufferedReader(new FileReader(csvPath));
            while ((line = br.readLine())!=null){
                String[] studentTemp = line.split(cvsSplitBy);
                System.out.println("studentID: " + studentTemp[3] +
                                 " courseID: " + courseModel.getCourseID() +
                                 " studentFirstName: " + studentTemp[0] +
                                 " studentMiddleName: " + studentTemp[1] +
                                 " studentLastName: " + studentTemp[2] +
                                 " isGrouped: " + 0);     
                if (!insertStudent(studentTemp, courseModel.getCourseID(), 0)){
                    return false;
                }
            }
        }
        catch (FileNotFoundException e){
            e.printStackTrace();
	} 
        catch (IOException e) {
            e.printStackTrace();
	} 
        finally {
            if (br != null) {
		try {
                    br.close();
		} 
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return true;
    }
    
    private void addItemsToComboBox() {
        ArrayList<User> instructors = instructorManager.getUsers();
        ArrayList<User> TAs = TAManager.getUsers();
        
        addNamesToComboBox(instructors, instructorComboBox);
        addNamesToComboBox(TAs, TAComboBox);
    }
    
    private void addNamesToComboBox(ArrayList<User> users, javax.swing.JComboBox cb) {
        for (User user : users) {
            String item = user.getFirstName().trim() + ", " 
                    + user.getMiddleName().trim() + ", "
                    + user.getLastName().trim() + ", "
                    + user.getEmployeeID();
            cb.addItem(item);
        }
    }
    
    private void loadMarkersIntoModel(){
        try {
            PreparedStatement stat = con.prepareStatement(
                    "SELECT * "
                            + "FROM Account "
                            + "WHERE isTA = 1 OR isInstructor = 1");
            ResultSet accounts = executeQuery(stat);
            processAccountInfo(accounts);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private void processAccountInfo(ResultSet rs) {
        try {
            while(rs.next()) {
                if(rs.getInt("isTA") == 1) {
                    User user = new User();
                    user.addAccount(new UserAccount(rs.getInt("accountID")));
                    user.setEmployeeID(rs.getInt("employeeID"));
                    user.setFirstName(rs.getString("firstName"));
                    user.setLastName(rs.getString("lastName"));
                    user.setMiddleName(rs.getString("middleName"));
                    TAManager.addUser(user);
                    
                    System.out.println("TA accountID is: " + user.getAccount().getAccountID());
                }
                if(rs.getInt("isInstructor") == 1) {
                    User user = new User();
                    user.setEmployeeID(rs.getInt("employeeID"));
                    user.setFirstName(rs.getString("firstName"));
                    user.setLastName(rs.getString("lastName"));
                    user.setMiddleName(rs.getString("middleName"));
                    instructorManager.addUser(user);
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    private boolean insertIntoDatabase() {
        if(insertCourses() && retriveCourseID() && insertTAs()) {
            return true;
        } else {
            return false;
        }
    }
    
    private boolean insertCourses() {
        try {
            Statement stat = con.createStatement();
            String[] chosens = null;
//            String instructorName = null;
            int instructorID = -1;
            if(!chosenInstructors.isEmpty()) {
                chosens = chosenInstructors.get(0).split(ModifyCourseGUI.SPLIT_SYMBOL);
                instructorID = Integer.parseInt(chosens[ModifyCourseGUI.EMPLOYEEID_INDEX].trim());
            }
            
            if (instructorID == -1) {
//                stat.executeUpdate("INSERT INTO Course(courseNum, courseName, startDate, endDate)"
//                     + " VALUES ('" 
//                     + courseModel.getCourseNumber() + "', '" 
//                     + courseModel.getCourseName()+ "', '" 
//                     + courseModel.getStartDate() + "', '"
//                     + courseModel.getEndDate() + "')");
            } else {
                  stat.executeUpdate("UPDATE Course SET instructorEmployeeID= '"+ instructorID+"' WHERE courseID = '"+courseModel.getCourseID()+"' ");
//                stat.executeUpdate("INSERT INTO Course(courseNum, courseName, startDate, endDate, "
//                        + "instructorEmployeeID) VALUES ('"
//                        + courseModel.getCourseNumber() + "', '"
//                        + courseModel.getCourseName()+ "', '"
//                        + courseModel.getStartDate() + "', '"
//                        + courseModel.getEndDate() + "', "
//                        + instructorID + ")");
            }
            return true;
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,ex,"SQLException", JOptionPane.INFORMATION_MESSAGE);
            ex.printStackTrace();
            return false;
        }
    }
    
    private boolean retriveCourseID(){
        try {
//            Statement stat = con.createStatement();
            
            String sql = "SELECT courseID FROM Course"
                    + " WHERE courseNum = '" + courseModel.getCourseNumber() + "' AND " 
                    + "courseName = '" + courseModel.getCourseName() + "' AND "
                    + "startDate = '" + courseModel.getStartDate() + "' AND "
                    + "endDate = '" + courseModel.getEndDate() + "'";
            
            PreparedStatement ps = con.prepareStatement(sql);
//            System.out.println(sql);
            System.out.println("courseNum: " + courseModel.getCourseNumber() +
                    ", startDate: " + courseModel.getStartDate() +
                    ", endDate: " + courseModel.getEndDate());
            /*
            System.out.println("courseNum = " + courseModel.getCourseNumber() +
                   "courseName = " + courseModel.getCourseName() +
                    "startD = " + courseModel.getStartDate() +
                    "endD = " + courseModel.getEndDate());
            */
            ResultSet rs = executeQuery(ps);
            
            
            
            if (rs.next()) {
                 System.out.println("++++++++++++++++++");
                courseModel.setCourseID(rs.getInt("courseID"));
            }
            
            System.out.println("courseID is: " + courseModel.getCourseID());
            
            return true;
                 
        } catch (SQLException ex) {
           ex.printStackTrace();
           return false;
        }
    }
    
    private boolean insertTAs(){
        if (!chosenTAs.isEmpty()) {
            try {
                Statement stat = con.createStatement();
                String[] chosens = null;
                
                for (String TA : chosenTAs) {
                    chosens = TA.split(ModifyCourseGUI.SPLIT_SYMBOL);
                    int TAID = Integer.parseInt(chosens[ModifyCourseGUI.EMPLOYEEID_INDEX].trim());
                    int accountID = TAManager.getUser(TAID).getAccount().getAccountID();
                    
                    TAManager.display();
                    
                    System.out.println("TAID: " + TAID +
                                    "accountID: " + accountID);
                    String SQL_0 =("INSERT INTO TA VALUES (" +
                           TAID + ", " + accountID + ", " + courseModel.getCourseID() + ")");
                    //String SQL_0 = ("UPDATE TA SET courseID= '"+courseModel.getCourseID()+"' WHERE TAEmployeeID = '"+ TAID +"' ");
//                     String SQL_0 =("INSERT INTO TA VALUES (" +
//                             TAID + ", " + accountID + ", " + courseModel.getCourseID() +", (SELECT TOP 1 activityID FROM Activity ORDER BY NEWID()))");
                     System.out.println(SQL_0);
                     stat.executeUpdate(SQL_0);
                     return true;
                     
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                return false;
            }
        }

        
         if (!deleteTAs.isEmpty()) {
            try {
                Statement stat = con.createStatement();
                String[] chosens = null;
                
                for (String TA : deleteTAs) {
                    chosens = TA.split(ModifyCourseGUI.SPLIT_SYMBOL);
                    int TAID = Integer.parseInt(chosens[ModifyCourseGUI.EMPLOYEEID_INDEX].trim());
                    int accountID = TAManager.getUser(TAID).getAccount().getAccountID();
                    
                    System.out.println("TAID: " + TAID +
                                    "accountID: " + accountID);
                    //String SQL_0 =("INSERT INTO TA VALUES (" +
                    //         TAID + ", " + accountID + ", " + courseModel.getCourseID() + ")");
                    String SQL_0 = ("DELETE from TA WHERE TAEmployeeID = '"+TAID+"' ");
//                     String SQL_0 =("INSERT INTO TA VALUES (" +
//                             TAID + ", " + accountID + ", " + courseModel.getCourseID() +", (SELECT TOP 1 activityID FROM Activity ORDER BY NEWID()))");
                     System.out.println(SQL_0);
                     stat.executeUpdate(SQL_0);
                     return true;
                     
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                return false;
            }
        }
        return true;
        
    }
    
    private String[] processStrings(){
        String[] chosens = null;
        for (String user : chosenTAs) {
            chosens = user.split(",");
            
        }
        return chosens;
    }
    
    private ResultSet executeQuery(PreparedStatement pstmt) {
        try {
            return(pstmt.executeQuery());
        } catch (SQLException se){
            System.out.println("\nSQL Exception occured, the state : "+
				se.getSQLState()+"\nMessage:\n"+se.getMessage()+"\n");
            return null;
	}
    }
    
    private void connectToDatabase() {
        String userName = "c275g11";
        String password = "bL344y3Emh2dPtaT";
        String url = "jdbc:sqlserver://cypress;" +
                        "user = " + userName + ";" +
			"password = " + password;
        
        // DEBUGG-------------------------
        System.out.println("\n connectionUrl = " + url + "\n\n");
        
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        }catch(ClassNotFoundException ce) {
            System.out.println("\n\nNo JDBC dirver; exit now.\n\n");
            return;
	}
        
        try {
            con = DriverManager.getConnection(url);
	} catch (SQLException se) {
            System.out.println("\n\nFail to connect to CSIL SQL Server; exit now.\n\n");
            return;
        }
    }
    
    private void displayMarkers() {
        System.out.println("Displaying Instructors: ");
        instructorManager.display();
        System.out.println("Displaying TAs: ");
        TAManager.display();
    }
    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(ModifyCourseMarkerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(ModifyCourseMarkerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(ModifyCourseMarkerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(ModifyCourseMarkerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new ModifyCourseMarkerGUI().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CreateButton;
    private javax.swing.JComboBox TAComboBox;
    private javax.swing.JButton addInstrButton;
    private javax.swing.JLabel addOrDelTALabel;
    private javax.swing.JButton addTAButton;
    private javax.swing.JButton backButton;
    private javax.swing.JLabel currInstLabel;
    private javax.swing.JTextField currInstrLabel;
    private javax.swing.JButton deleteTAButton;
    private javax.swing.JLabel instrIDLabel;
    private javax.swing.JTextField instrIDTextField;
    private javax.swing.JComboBox instructorComboBox;
    private javax.swing.JList instructorList;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList markerList;
    private javax.swing.JLabel markersAddedLabel;
    private javax.swing.JLabel markersDelLabel;
    private javax.swing.JLabel modifyInstructorTATitle;
    private javax.swing.JLabel newInstrLabel;
    private javax.swing.JButton removeCurrInstrButton;
    private javax.swing.JList removeList;
    private javax.swing.JButton removeTAButton;
    private javax.swing.JTable taTable;
    private javax.swing.JButton undoInstrButton;
    private javax.swing.JButton undoMarkerButton;
    private javax.swing.JLabel updateCSVPathLabel;
    private javax.swing.JTextField updateCSVPathTextField;
    private javax.swing.JButton viewTASButton;
    // End of variables declaration//GEN-END:variables
}
